<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Just Do It ! - Yolo</title>
    <link>https://jupilhwang.github.io/post/</link>
    <description>Recent content in Post on Just Do It ! - Yolo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US.UTF8</language>
    <copyright>Jupil Hwang All rights reserved</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jupilhwang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concourse 를 통한 CI/CD 파이프라인</title>
      <link>https://jupilhwang.github.io/post/210208.concourse_pipeline/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.concourse_pipeline/</guid>
      <description>Concourse 설치 Concourse 설치하는 방법은 여러가지가 있는데, 대표적으로 아래 두가지 방법이 있다. 테스트, 데모, PoC 용도로는 docker-compose를 사용할 수 있으며, 운영 서버로 구성하는 경우 서버에 설치하거나 Kubernetes 에 설치할 것을 권고한다.
https://concourse-ci.org/docs.html
Docker-compose docker-compose 를 사용해서 8080 포트로 concurse 를 실행할 수 있으며, docker-compose.yml 파일을 수정하여 포트나 인스턴스 수를 조정할 수 있다.
wget https://concourse-ci.org/docker-compose.yml docker-compose up -d Kubernetes / Helm 쿠버네티스에 Helm 으로 설치할 경우, https://github.com/concourse
helm repo add concourse https://concourse-charts.</description>
    </item>
    
    <item>
      <title>Concourse 를 통한 CI/CD 파이프라인</title>
      <link>https://jupilhwang.github.io/post/210210.tekton-cd/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210210.tekton-cd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NSX-T Advanced Load Balancer 를 사용한 쿠버네티스 워크로드 LB</title>
      <link>https://jupilhwang.github.io/post/210208.avi_lb/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210208.avi_lb/</guid>
      <description>Avi Networks Architecture https://avinetworks.com/docs/ako/0.8/ako-installation
 Avi Controller 전체 네트워크의 로드 발랜서, WAF, 방화벽, 인증서, 로깅/모니터링 등을 담당하는 컨트럴 플레인이다.
Avi SE (Service Engine) 실제 트래픽이 전달되는 Virtual Server가 동작하는 엔진으로 데이터 플레인 역할을 한다.
Avi Kubernetes Operator (AKO)  Ingress controller : 쿠버네티스 인그레스와 avi lb 의 Pool과 Virtual Server 와 동기화를 통해서 인그레스에 외부 접속 점을 만들어준다 LB Network Policy  </description>
    </item>
    
    <item>
      <title>openssl로 TLS용 사설인증서 만들기</title>
      <link>https://jupilhwang.github.io/post/210205.tls_%EC%82%AC%EC%84%A4%EC%9D%B8%EC%A6%9D%EC%84%9C/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210205.tls_%EC%82%AC%EC%84%A4%EC%9D%B8%EC%A6%9D%EC%84%9C/</guid>
      <description>Https 서비스를 위한 TLS 인증서 만들기 https://github.com/jupilhwang/mk-ssl-cert-key
$DOMAIN 값을 원하는 도메인(FQDN)으로 지정한다.
export DOMAIN=example.com curl https://raw.githubusercontent.com/jupilhwang/mk-ssl-cert-key/master/mk-ssl-cert-key.sh | bash - #!/bin/bash set -e SCRIPTDIR=$(cd $(dirname &amp;#34;$0&amp;#34;) &amp;amp;&amp;amp; pwd -P) : ${DOMAIN:?must be set the DNS domain root (ex: example.com)} : ${KEY_BITS:=4096} : ${DAYS:=1825} # Generate CA Certificate openssl req -new -x509 -nodes -sha256 -newkey rsa:${KEY_BITS} -days ${DAYS} -keyout ${DOMAIN}.ca.key.pkcs8 -out ${DOMAIN}.ca.crt -config &amp;lt;( cat &amp;lt;&amp;lt; EOF [ req ] prompt = no distinguished_name = dn [ dn ] C = KR O = Private CN = Autogenerated CA EOF ) # Generate Private key with CA Certificate key openssl rsa -in ${DOMAIN}.</description>
    </item>
    
    <item>
      <title>Jenkins 파이프라인 to Build Image / Push Image on Kubernetes</title>
      <link>https://jupilhwang.github.io/post/210111.jenkinsfile%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8onkubernetes/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/210111.jenkinsfile%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8onkubernetes/</guid>
      <description>Jenkins 설치 On K8s Prerequisites  Docker pipeline plugin Google container registry for authenticate Kubernetes config  Remote Docker Server docker daemon 에서 0.0.0.0:4243 을 추가해서 원격에서 tcp 로 접속할 수 있도록 한다.
# File : /etc/default/docker DOCKER_OPTS=&amp;#34;--dns 8.8.8.8 -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock&amp;#34; # File : /lib/systemd/system/docker.service EnvironmentFile=/etc/default/docker ExecStart=/usr/bin/docker -H fd:// $DOCKER_OPTS --containerd=/run/containerd/containerd.sock 또는
# File : /etc/docker/deamon.json .. &amp;#34;hosts&amp;#34;: [&amp;#34;tcp://0.0.0.0:4243&amp;#34;, &amp;#34;unix:///var/lib/docker.sock&amp;#34;, &amp;#34;fd://&amp;#34;], .. # File : /lib/systemd/system/docker.service ExecStart=/usr/bin/docker --containerd=/run/containerd/containerd.sock 또는 ssh 로 접속하도록 할 수 있는데, 이 경우 ssh-copyid 로 미리 authorizedeky 로 등록 해 줘야한다.</description>
    </item>
    
    <item>
      <title>jumpbox on vSphere for Tanzu</title>
      <link>https://jupilhwang.github.io/post/201223-vsphere-jumpbox-for-tanzu/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/201223-vsphere-jumpbox-for-tanzu/</guid>
      <description>이 문서는 vsphere 환경에서 tanzu를 설치/설정하기 위해 사용하는 jumpbox 를 손쉽게 사용하기 위한 문서이다.
deploy OVA 대체로 Private Cloud이든 Public Cloud이든 동일한 작업환경을 위해서 Jumpbox를 설치해서작업을 하며 Jumpbox로는 ubuntu server 를 많이 사용한다. 여기서도 ubuntu-server-20.04.1 (LTS) 을 기준으로 설명한다.
https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.ova
 iso로 실제 ubuntu-server를 설치해도 되고, 이미 export 해놓은 ova를 업로드하여 사용할 수 있지만, Public internet이 되는 환경이라면 이미 만들어진 ubuntu-cloudimage 를 사용하는 것도 좋다.
ubuntu cloud image는 https://cloud-images.ubuntu.com 에서 받을 수 있다.</description>
    </item>
    
    <item>
      <title>TKG 1.2 설치/설정 : quick start</title>
      <link>https://jupilhwang.github.io/post/201101-tkg-quick-start/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/201101-tkg-quick-start/</guid>
      <description>TKG Components Storage Class  vSphere 에서 Storage를 사용하기 위해 Tag 기반의 policy 를 적용한 Datastore 를 사용한다.  govc tags.category.create tkg-storage-category govc tags.create -c tkg-storage-category tkg-storage govc tags.attach tkg-storage /Datacenter/datastore/LUN01  tkg cluster 생성 시 자동으로 만들어 진 default sc 를 삭제하고 새로 생성한다.  k delete sc default k apply -f -&amp;lt;&amp;lt;-EOF kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: default annotations: storageclass.kubernetes.io/is-default-class: &amp;#34;true&amp;#34; provisioner: csi.vsphere.vmware.com parameters: storagepolicyname: &amp;#34;TKG Storage Policy&amp;#34; # optional fstype: ext4 EOF MetalLB k apply -f https://raw.</description>
    </item>
    
    <item>
      <title>HAProxy - dataplaneapi / Kubernetes - service-api</title>
      <link>https://jupilhwang.github.io/post/200630_haproxy_dataplaneapi/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200630_haproxy_dataplaneapi/</guid>
      <description>HA-Proxy SW loadbalancer로 제일 많이 사용하는 것 중에 한가지가 nginx나 haproxy 일것이다. http/s 위주의 서비스라면 nginx로 충분하겠지만, 범용으로 tcp/udp 서비스를 위한 Load Balancer 로 사용할려면 ha-proxy 를 사용하는 것이 좋다. 또는 envoy나 traefik 등을 사용할 수 있다.
   subject http https     Latency (HTTP)       Requests/Second        출처 : https://www.loggly.com/blog/benchmarking-5-popular-load-balancers-nginx-haproxy-envoy-traefik-and-alb/
위의 Benchmark 자료를 보면 알 수 있듯이, envoy나 traefik이 요즘 유행하고 있지만, 역시 구관이 명관이다.</description>
    </item>
    
    <item>
      <title>LoadBalancer API for k8s</title>
      <link>https://jupilhwang.github.io/post/200630.loadbalancerapi_for_k8s/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200630.loadbalancerapi_for_k8s/</guid>
      <description>Service API https://github.com/kubernetes-sigs/service-api
Network Operator LoadBalancer API </description>
    </item>
    
    <item>
      <title>TLS with certbot</title>
      <link>https://jupilhwang.github.io/post/200701.tls_certbot/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200701.tls_certbot/</guid>
      <description>TLS Let&amp;rsquo;s Encrypted certbot certbot 설치 PIP로 설치 Package Management로 설치 Enable the universe repository sudo apt-get install software-properties-common sudo add-apt-repository universe sudo apt-get update Install certbot sudo apt install certbot certbot certonly --manual \ --preferred-challengers=dns \ --email jupil.hwang@gmail.com \ --server https://acme-v02.api.letsencrypt.org/directory \ --agress-tos \ -d *.harbor.lgvmw01.local </description>
    </item>
    
    <item>
      <title>govc</title>
      <link>https://jupilhwang.github.io/post/200629-govc/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200629-govc/</guid>
      <description>govc  OVA_Names=(&amp;#34;photon-3-kube-v1.18.3-vmware.1&amp;#34; &amp;#34;photon-3-haproxy-v1.2.4-vmware.1&amp;#34;) TKG_VM_FOLDER=&amp;#34;tkg&amp;#34; govc folder.create &amp;#34;/${GOVC_DATACENTER}/vm/${TKG_VM_FOLDER}&amp;#34; for OVA_NAME in ${OVA_Names[@]}; do govc import.spec ${OVA_NAME}.ova | jq &amp;#39;.Name=&amp;#34;OVA_NAME&amp;#34;&amp;#39; | jq &amp;#39;.NetworkMapping[0].Network=&amp;#34;VM Network&amp;#34;&amp;#39; &amp;gt; ${OVA_NAME}.json sed -i &amp;#39;s|OVA_NAME|&amp;#39;${OVA_NAME}&amp;#39;|g&amp;#39; ${OVA_NAME}.json govc import.ova -options=${OVA_NAME}.json -folder=&amp;#34;/${GOVC_DATACENTER}/vm/${TKG_VM_FOLDER}&amp;#34; ${OVA_NAME}.ova govc snapshot.create -vm ${OVA_NAME} initial govc vm.markastemplate ${OVA_NAME} done </description>
    </item>
    
    <item>
      <title>TKG에 Antrea CNI 사용하기</title>
      <link>https://jupilhwang.github.io/post/200625_antrea_on_tkg/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200625_antrea_on_tkg/</guid>
      <description>Antrea Antrea 는 OVS(Open vSwitch)를 기본으로 하는 Kubernetes용 네트워킹 솔루션 이다. Layer3/4 역할을 담당하며, 보안과 운영상의 도움을 주도록 설계되었다.
https://github.com/vmware-tanzu/antrea/
 Prerequisites  NodeIPAMController : K8s에서 enabled 되어 있어야 한다. kubeadm 으로 클러스터를 만들 떄 &amp;ndash;pod-network-cidr 옵션이 있어야 한다 Open vSwitch kernel module 이 노드에 있어야 한다  Willam Lam 의 Antrea 설치 문서와 내부 자료를 참고했다.
설치 tkg의 새로운 Plan을 만든다. tkg는 ~/.tkg/providers/infrastructure-vsphere/v0.6.4/cluster-template-*.yaml 을 plan으로 사용하기 때문에 새로운 yaml을 만든다.</description>
    </item>
    
    <item>
      <title>TKG에 MetalLB</title>
      <link>https://jupilhwang.github.io/post/200625_metallb/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200625_metallb/</guid>
      <description>MetalLB # context kubectl config use-context my-cluster-admin@my-cluster ## MetalLB는 kube-proxy의 IPVS를 사용할 때 Strict ARP가 필요하다 kubectl get configmap kbue-proxy -n kube-system -o yaml | sed -e &amp;#34;s/strictARP: false/strictARP: true/&amp;#34; | kubectl apply -f - -n kube-system kubectl create ns metallb-system # Deploy MetalLB kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/metallb.yaml -n metallb-system podsecuritypolicy.policy/controller created podsecuritypolicy.policy/speaker created serviceaccount/controller created serviceaccount/speaker created clusterrole.rbac.authorization.k8s.io/metallb-system:controller created clusterrole.rbac.authorization.k8s.io/metallb-system:speaker created role.rbac.authorization.k8s.io/config-watcher created role.rbac.authorization.k8s.io/pod-lister created clusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller created clusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker created rolebinding.</description>
    </item>
    
    <item>
      <title>CF for K8s</title>
      <link>https://jupilhwang.github.io/post/200515_cf-for-k8s/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/200515_cf-for-k8s/</guid>
      <description>Cloudfoundry 는 컨테이너 기반의 애플리케이션을 위한 플랫폼으로 PaaS 시장을 선도하고 있다. Heroku와 더불어 PaaS의 양대 산맥이라 할 수 있을 것이다. Cloudfoundry 는 자체 개발한 Garden이라고 하는 컨테이너 오케스트레이션 툴을 사용하였다. Kubernetes 가 등장하고 나서, 이 컨테이너 오케스트레이션 툴을 Kuberentes 으로 대체하는 프로젝트가 등장하였고, 마침내 cf-for-k8s 가 나왔다. 기존에 애플리케이션을 개발하여 손쉽게 배포하여 테스트하고 운영 하던 경험을 그대로 쿠버네티스에서도 경험할 수 있다.
 CloudFoundry for Kubernetes https://tanzu.vmware.com/developer/guides/kubernetes/cf4k8s-gs/
그 동안 BOSH / Deigo 기반의 Cloudfoundry (이하 CF) 를 Kubernetes 기반으로 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>PowerCLI CORE for VMware</title>
      <link>https://jupilhwang.github.io/post/powrecli-core-for-vmware/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/powrecli-core-for-vmware/</guid>
      <description>PowerShell   Windows에서 만든 Shell로 OSS로 모든 OS에서 사용가능한 Shell이다. bash 나 다른 shell 에 비해서 많이 사용하지 않지만, 모든 OS에서 동작하는 스크립트를 만든다고 하면 좋은 대안이다.
  vSphere의 Automation 을 모듈인 PowerCLI는 PowerShell 기반으로 만들어져 있다.
  PowerShell 설치
  Linux
  MacOS
    PowerCLI CORE  제공하는 Modules VMware.VimAutomation.Cis.Core VMware.VimAutomation.Common VMware.VimAutomation.Core VMware.VimAutomation.Nsxt VMware.VimAutomation.Vds VMware.VimAutomation.Vmc VMware.VimAutomation.Sdk VMware.VimAutomation.Storage VMware.VimAutomation.StorageUtility  </description>
    </item>
    
    <item>
      <title>vSphere with Kubernetes - Tanzu Kubernetes Cluster : 선언적(Declarative) GitOPS CD</title>
      <link>https://jupilhwang.github.io/post/vsphere-with-kubernetes-gitops/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/vsphere-with-kubernetes-gitops/</guid>
      <description>GitOps ArgoCD Installation kubectl create ns argocd kubectl -n argocd apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml  Disable auth flag  kubectl patch deploy argocd-server -n argocd -p &#39;[{&amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/spec/template/spec/containers/0/command/-&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;--disable-auth&amp;quot;}]&#39; --type json CD for Tanzu Kubernetes Cluster </description>
    </item>
    
    <item>
      <title>vSphere with Kubernetes의 Master/Worker Node SSH 접속하기</title>
      <link>https://jupilhwang.github.io/post/vsphere-with-kuberentes%EC%9D%98-master_worker-node-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/vsphere-with-kuberentes%EC%9D%98-master_worker-node-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0/</guid>
      <description>vSphere with Kubernetes vSphere 7.0 vSphere 7.0의 가장 큰 차이라고 한다면 당연하게 Kubernetes의 지원이다. 기존에 가상 머신, 스토리지, 네트워크의 SDDC부분에 중점을 두었다면, 쿠버네티스를 사용한 메니지먼트로 다양한 환경에서 동일한 메니페스트를 통해 관리를 할 수 있도록 한 것이다. Supervisor Cluster vSphere 7.0 의 Supervisor 클러스터를 통해서 vSphere 전반적인 가상머신, vSphere Pod, Tanzu Kubernetes Cluster를 생성/삭제 등의 라이프사이클을 관리한다. 사용자/그룹 관리, SSO연계, 퍼미션 설정, 네임스페이스 관리 등을 한다.
Supervisor 노드 접속 Supervisor노드에 접속하기 위해서</description>
    </item>
    
    <item>
      <title>Kind를 이용한 쿠버네티스 클러스터 만들기</title>
      <link>https://jupilhwang.github.io/post/kind%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/kind%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>Kubernetes 개발환경 Vagrant vs Minikube vs Kind Local 환경에서 K8s를 사용하기 위해서 다양한 방법을 사용 할 수 있다.
Vagrant Vagrant는 HashCorp에서 만든 프로비저닝 툴로, VagrantFile에 기본 이미지와 생성된 VM에 필요한 설정을 미리 Code화 해서 제공하는 툴이다.
# vagrant cli 가 설치 되어야 한다. vagrant version # git cli 가 설치 되면 좋다. git version # 기본 가상화 솔루션으로 VirtualBox를 사용하기 때문에, VirtualBox가 미리 설치가 되어 있어야 한다. Hyper-V나 다른 가상화 툴을 사용할 수 있다.</description>
    </item>
    
    <item>
      <title>Ventoy: Multiple Boot USB 디스크 생성툴</title>
      <link>https://jupilhwang.github.io/post/multiple-boot-usb-%EC%83%9D%EC%84%B1%ED%88%B4/</link>
      <pubDate>Thu, 23 Apr 2020 10:46:06 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/multiple-boot-usb-%EC%83%9D%EC%84%B1%ED%88%B4/</guid>
      <description>Multiple Boot USB 다른 툴들 OS 설치를 위해서 USB Disk가 필요한 경우가 가끔씩 있는데, 이런 때 마다 Windows, Linux (Archlinux, Ubuntu, CentOS etc..), MacOS (Hackintosh) 등을 위해서 USB Disk 를 만든다. 이러면 여러개의 USB를 가지고 있어야 하고, 불편하기도 하다. 이럴 때, 하나의 USB Disk 에 여러개의 OS 설치 디스크를 넣고 다니면 편하기도 하다.
대표적인 것들이 아래와 같은 툴들이 있다.
 Yumi : yumi MultibootUSB : multibootusb.org  Ventoy 기존 툴과의 가장 큰 차이점은 기존 툴들이 ISO 압축을 해제하고, 압축 해제된 파일을 USB로 복사하는 방식이다.</description>
    </item>
    
    <item>
      <title>PKS의 NSX에서 LB와 Ingress 사용</title>
      <link>https://jupilhwang.github.io/post/pks_lb_ingress/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/pks_lb_ingress/</guid>
      <description>PKS와 네트워크 - PKS의 NSX에서 LB와 Ingress 사용 Network Profile 쿠버네티스 클러스터에서 사용할 네트워크를 위해 미리 프로파일을 생성해 놓고 PKS에서 클러스터를 만들 때 이 네트워크 프로파일을 지정할 수 있다.
 기본 쿠버네티스 클러스터 속성  ubuntu@ubuntu-205:~/works/pks-network-profile$ pks cluster k8s --details PKS Version: 1.7.0-build.26 Name: k8s K8s Version: 1.16.7 Plan Name: Small UUID: a09dc43b-c1dc-42db-9fad-c00c2d3594f0 Last Action: CREATE Last Action State: succeeded Last Action Description: Instance provisioning completed Kubernetes Master Host: 10.195.70.136 Kubernetes Master Port: 8443 Worker Nodes: 2 Kubernetes Master IP(s): 10.</description>
    </item>
    
    <item>
      <title>SpringBoot 2.3 과 R2DBC를 이용한 어플리케이션</title>
      <link>https://jupilhwang.github.io/post/springboot_2.3_with_r2dbc_mysql/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/springboot_2.3_with_r2dbc_mysql/</guid>
      <description>SpringBoot 2.3 [참고 URL] https://docs.microsoft.com/en-us/azure/java/spring-framework/configure-spring-data-r2dbc-with-azure-mysql∏</description>
    </item>
    
    <item>
      <title>Istio 1.5로 구성하는 서비스메시</title>
      <link>https://jupilhwang.github.io/post/istio1.5%EB%A1%9C_%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94_%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A9%94%EC%8B%9C/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/istio1.5%EB%A1%9C_%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94_%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A9%94%EC%8B%9C/</guid>
      <description>Istio로 구성하는 서비스 메시 이전 Architecture 일반적으로 Istio의 구성요소라고 하면, 아래와 같이 이야기한다.
 Envoy Proxy Mixer Pilot Galley Citadel   하지만, Mixer로 인한 네트워크 레이턴시 성능 이슈가 있어서, 아키텍처가 변경이 되었는데 Mixer가 없어지고 Telemetry로 변경이 되고, Envoy Proxy 에서 바로 모니터링 솔루션우로 메트릭을 전송하는 형태로 변경이 되었다.
달라진 Architecture  </description>
    </item>
    
    <item>
      <title>[도서] Kubernetes In Action</title>
      <link>https://jupilhwang.github.io/post/kubernetes_in_action/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/kubernetes_in_action/</guid>
      <description>쿠버네티스를 공부하면서 많이 보는 책 중에 하나가 &amp;ldquo;Kubernetes In Action&amp;rdquo; 일 것이다. 동작 방식을 도식화하여 어떻게 동작하는지 쉽게 설명하고 있어서, Kubernetes를 알고 싶은 사람에게 좋은 책이다.
한국어로 번역이 되어서 한번 출간이 되었는데, 기존 번역서에서 누락된 부분이나 번역이 미흡한 부분을 보완하여, 이번에 재번역되어서 출간되었다.
 </description>
    </item>
    
    <item>
      <title>사용자/그룹 관리를 위한 Aerobase</title>
      <link>https://jupilhwang.github.io/post/%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B7%B8%EB%A3%B9%EA%B4%80%EB%A6%AC%EB%A5%BC%EC%9C%84%ED%95%9Caerobase/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B7%B8%EB%A3%B9%EA%B4%80%EB%A6%AC%EB%A5%BC%EC%9C%84%ED%95%9Caerobase/</guid>
      <description>Aerobase 모든 시스템 솔루션에는 IAM(Identity &amp;amp; Access Management)이 필요하다. 쉽게는 LDAP을 위한 OpenLDAP이나 OpenDS같은것을 생각할 수 있으나, Keycloak기반의 Aerobase가 최근에 인기가 있다. 단순 IAM 뿐만 아니라 SSO 솔루션(OAuth2, OIDC, SAML)으로도 사용이 가능하다.
https://aerobase.io
 Free: unlimited application and back-end protection without any charges Multi-platform support: single UI and API to deliver OAuth2 Multi-SDK support: provides SDKs  OpenID Connect public cloud 인 https://cloud.aerobase.io/portal 에 사용자 계정을 생성하여, 사용할 수도 있다.</description>
    </item>
    
    <item>
      <title>Kubernetes 에서 Kubesphere를 이용한 DevOps</title>
      <link>https://jupilhwang.github.io/post/kubernetes%EC%97%90%EC%84%9C-kubesphere%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-devops/</link>
      <pubDate>Wed, 25 Mar 2020 10:46:06 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/kubernetes%EC%97%90%EC%84%9C-kubesphere%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-devops/</guid>
      <description>Developer Portal with Kubesphere kubesphere (https://github.com/kubesphere/kubesphere) 의 오픈소스 프로젝트로 쿠버네티스 클러스터에서 사용할 수 있는 웹 UI를 제공합니다. 워크스페이스/프로젝트 단위로 워크로드를 관리하고, Jenkins를 통한 파이프라인도 제공한다. 내부적으로 프로메테우스와 ElasticSearch 를 통한 모니터링/로깅을 제공한다. OpenPitrix 를 사용한 App Store도 제공한다.
공식 사이트: https://kubesphere.io
Environments  PKS(Pivotal Container Service) 1.6.1 NSX-T 2.4.3 vSphere 6.7U3  PKS Installation with EPMC(Enterprise PKS Management Console)  Deploye PKS Management Console Configuration Deploy   Create K8s Cluster   클러스터 생성</description>
    </item>
    
    <item>
      <title>코틀린_Kotlin_다시보기1</title>
      <link>https://jupilhwang.github.io/post/%EC%BD%94%ED%8B%80%EB%A6%B0_kotlin_%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B01/</link>
      <pubDate>Fri, 27 Apr 2018 10:36:21 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/%EC%BD%94%ED%8B%80%EB%A6%B0_kotlin_%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B01/</guid>
      <description>코틀린 kotlin 기초 기본타입 패키지 흐름제어 리턴과 점프 클래스와 오브젝트 클래스와 상속 프로퍼티와 필드 인터페이스 확장 데이터 클래스 지네릭 리제릭 함수 중첩 클래스 Enum 클래스 오브젝트 식과 선언 위임 위임 프로퍼티 함수와 람다 함수 함수선언 함수사용  중위표현 파라미터 기본인자 이름(Named)인자 Unit리턴함수 단일 식 함수 리턴 타입 지정 가변인자(Varargs)  함수범위  로컬 함수 멤버 함수  지네릭함수 인라인함수 확장함수 고차함수와 람다 꼬리 재귀함수 고차함수와 람다 고차함수 인라인함수 람다식과 임의함수 인라인 함수 noinline 비-로컬 리턴 Reified 타입 파라미터 기타 coroutines ###</description>
    </item>
    
    <item>
      <title>공적개발원조_ODA</title>
      <link>https://jupilhwang.github.io/post/%EA%B3%B5%EC%A0%81%EA%B0%9C%EB%B0%9C%EC%9B%90%EC%A1%B0_oda/</link>
      <pubDate>Tue, 24 Apr 2018 15:20:28 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/%EA%B3%B5%EC%A0%81%EA%B0%9C%EB%B0%9C%EC%9B%90%EC%A1%B0_oda/</guid>
      <description>공적개발원조 (ODA - Development) https://blog.quandl.com/api-for-economic-data
python + wbdata + matplotlib
import wbdata import pandas import matplotlib.pyplot as plt #set up the countries I want countries = [&amp;#34;CL&amp;#34;,&amp;#34;UY&amp;#34;,&amp;#34;HU&amp;#34;] #set up the indicator I want (just build up the dict if you want more than one) indicators = {&amp;#39;NY.GNP.PCAP.CD&amp;#39;:&amp;#39;GNI per Capita&amp;#39;} #grab indicators above for countires above and load into data frame df = wbdata.get_dataframe(indicators, country=countries, convert_date=False) #df is &amp;#34;pivoted&amp;#34;, pandas&amp;#39; unstack fucntion helps reshape it into something plottable dfu = df.</description>
    </item>
    
    <item>
      <title>Packer Oci Machine Image</title>
      <link>https://jupilhwang.github.io/post/20180412-packer-oci-machine-image/</link>
      <pubDate>Thu, 12 Apr 2018 10:44:17 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/20180412-packer-oci-machine-image/</guid>
      <description>OCI builder for Packer Packer는 hashcorp에서 만든 오픈소스로 Machine Image생성 툴이다. AMI, Azure, GCP뿐만 아니라, Oracle Cloud Infrastructure또한 지원을 한다. 물론 기본 이미지를 Provisioning하고 Ansible이나 기타 Tool을 통해서 Configuration이 가능하지만, Packer를 사용하면 미리 이미지를 만들어서 배포 후 바로 실행 할 수 있다.
사전에 알아야 할 사항   packer를 설치한다
 Linux의 경우 손쉽게 Repository에서 다운로드해서 설치가능하다  yaourt -S packer-io or Download from packer site (https://www.packer.io/downloads.html)
  OCI builder for packer</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://jupilhwang.github.io/post/kubernetes_101/</link>
      <pubDate>Thu, 23 Nov 2017 10:46:06 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/kubernetes_101/</guid>
      <description>오라클 개발자 Meetup에서 발표한 Kubernetes 101발표자료입니다.</description>
    </item>
    
    <item>
      <title>lazybones 에 새로운 Template추가하기</title>
      <link>https://jupilhwang.github.io/post/lazybones-%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-template%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sat, 10 Dec 2016 15:04:27 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/lazybones-%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-template%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description>lazybones 의 템플릿 lazybones 의 기본 템플릿은 list 를 통해서 볼 수 있는데, 이외의 다른 템플릿을 추가하기 위해서는 config.groovy에 새로운 Repository 를 추가해 줘야 한다.
lazybones list ${USER_HOME}/.lazybones/config.groovy
bintaryRepositories = [ &amp;quot;kyleboon/lazybones&amp;quot;, &amp;quot;griffon/griffon-lazybones-templates&amp;quot;, &amp;quot;pledbrook/lazybones-templates&amp;quot; ] griffon javafx 를 사용하는 groovy Sample 프로젝트를 생성하기 위해서는 아래와 같이 하면 된다.
lazybones create griffon-javafx-groovy griffon-javafx-groovy-sample lazybones 의 추가 템플릿들 Available templates in kyleboon/lazybones dropwizard groovy-app java-basic jbake Available templates in griffon/griffon-lazybones-templates griffon-javafx-groovy griffon-javafx-java griffon-javafx-kotlin griffon-lanterna-groovy griffon-lanterna-java griffon-pivot-groovy griffon-pivot-java griffon-plugin griffon-swing-groovy griffon-swing-java Available templates in pledbrook/lazybones-templates aem-multimodule-project afterburnerfx afterburnergfx angular-grails asciidoctor-gradle asciidoctor-revealjs dropwizard gaelyk gradle-plugin gradle-quickstart groovy-app groovy-lib java-basic lazybones-project nebula-plugin ratpack ratpack-lite spring-boot-actuator test-handlebars </description>
    </item>
    
    <item>
      <title>Docker base image size늘리기</title>
      <link>https://jupilhwang.github.io/post/docker-base-image-size%EB%8A%98%EB%A6%AC%EA%B8%B0/</link>
      <pubDate>Wed, 23 Nov 2016 14:29:35 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/docker-base-image-size%EB%8A%98%EB%A6%AC%EA%B8%B0/</guid>
      <description>Docker Image 의 Base Sizse 늘리기 docker -D infoContainers: 1 Running: 1 Paused: 0 Stopped: 0Images: 1Server Version: 1.12.3Storage Driver: devicemapper Pool Name: docker-8:17-35389497-pool Pool Blocksize: 65.54 kB Base Device Size: 53.69 GB...docker 의 기본 이미지 사이즈는 10GB 이다. 일반적으로 그냥 docker 를 설치하고 이미지를 실행해서 &amp;lsquo;df -h&#39;를 통해서 사이즈를 확인하면, 9.99GB가 나온다. 하지만 때때로 10GB가 넘는 경우가 발생한다. 외부 Volume을 연결할 수도 있겠지만, 컨테이너 자체에서 스토리지를 관리하고 싶을때도 있다. 이런 경우, systemd docker.</description>
    </item>
    
    <item>
      <title>Nautilus에서 문서 선택해서 Edit시 한글입력문제</title>
      <link>https://jupilhwang.github.io/post/nautilus%EC%97%90%EC%84%9C-%EB%AC%B8%EC%84%9C-%EC%84%A0%ED%83%9D%ED%95%B4%EC%84%9C-edit%EC%8B%9C-%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5%EB%AC%B8%EC%A0%9C/</link>
      <pubDate>Tue, 22 Nov 2016 14:48:38 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/nautilus%EC%97%90%EC%84%9C-%EB%AC%B8%EC%84%9C-%EC%84%A0%ED%83%9D%ED%95%B4%EC%84%9C-edit%EC%8B%9C-%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5%EB%AC%B8%EC%A0%9C/</guid>
      <description>Linux 에서 한글입력 시 문제 ~/.xprofile 에 아래와 같이 추가한다.
export XIM=&amp;#34;uim&amp;#34; export GTK_IM_MODULE=&amp;#39;uim&amp;#39; export QT_IM_MODULE=&amp;#39;uim&amp;#39; exec uim-xim &amp;amp; export XMODIFIERS=&amp;#39;@im=uim&amp;#39; exec uim-toolbar-gtk3-systray &amp;amp;   WPS에서 한글입력 시 한글입력이 되지 않는 문제가 있는데, 이는 uim-xim 을 띄우고, qtconfig-qt4의 interface 에서 ime를 xim 으로 해야 wps에서 한글입력이 제대로 됨
  Natuilus 에서 문서 선택하고, 마우스 오른쪽 클릭 후 Edit를 선택하면 WPS또는 MS Office에서 한글 입력이 되지 않는 문제가 있음 하지만, Thunar 나 Command line에서 WPS나 MS Office 를 띄우면 한글입력에 문제가 되지 않음.</description>
    </item>
    
    <item>
      <title>oh my zsh 설치하기</title>
      <link>https://jupilhwang.github.io/post/oh-my-zsh-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 22 Nov 2016 00:27:10 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/oh-my-zsh-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>zsh 를 설치하고, oh-my-zsh 를 설치하기
$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh </description>
    </item>
    
    <item>
      <title>nmcli 다시보기</title>
      <link>https://jupilhwang.github.io/post/nmcli-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0/</link>
      <pubDate>Mon, 21 Nov 2016 18:06:53 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/nmcli-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0/</guid>
      <description>네트워크 설정 네트워크 관리를 위한 CLI (command line tool)인 nmcli 에 대해서 다시 한번 보자. (맨날 까먹으니까&amp;hellip;.. ㅠㅠ)
command line tool 인 nmcli 는 사용자가 직접 또는 NetworkManager를 위한 스크립트를 사용할 수 있다. 기본적인 명령어 모양은 아래와 같다
$ netcli [OPTIONS] OBJECT { COMMAND | help } OBJECT 는 general, networking, radio, connection, device, agent, monitor 이다. 그리고 가장 많이 사용하는 OPTIONS은 -t (&amp;ndash;terse), -p (&amp;ndash;pretty), -h (&amp;ndash;help) 이다.
$ nmcli help Usage: nmcli [OPTIONS] OBJECT { COMMAND | help } OPTIONS -t[erse] terse output -p[retty] pretty output -m[ode] tabular|multiline output mode -c[olors] auto|yes|no whether to use colors in output -f[ields] &amp;lt;field1,field2,.</description>
    </item>
    
    <item>
      <title>리눅스 JVM 튜닝하기</title>
      <link>https://jupilhwang.github.io/post/linux-jvm-%ED%8A%9C%EB%8B%9D%ED%95%98%EA%B8%B0/</link>
      <pubDate>Fri, 18 Nov 2016 19:34:42 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/linux-jvm-%ED%8A%9C%EB%8B%9D%ED%95%98%EA%B8%B0/</guid>
      <description>JVM java 를 설치하고 나서, &amp;lt;JAVA_HOME&amp;gt;/jre/lib/security/java.security 파일을 수정해 준다.
#networkaddress.cache.ttl=-1 networkaddress.cache.ttl=30 그리고 Linux 의 경우 /etc/nsswitch.conf 의 host 설정을 변경한다.
ehco &amp;#39;hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4&amp;#39; &amp;gt;&amp;gt; /etc/nsswitch.conf </description>
    </item>
    
    <item>
      <title>java Collections의 역습</title>
      <link>https://jupilhwang.github.io/post/java-collections%EC%9D%98-%EC%97%AD%EC%8A%B5/</link>
      <pubDate>Thu, 17 Nov 2016 17:28:32 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/java-collections%EC%9D%98-%EC%97%AD%EC%8A%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rxGroovy다시보기</title>
      <link>https://jupilhwang.github.io/post/rxgroovy%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0/</link>
      <pubDate>Thu, 17 Nov 2016 17:08:54 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/rxgroovy%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Actor모델</title>
      <link>https://jupilhwang.github.io/post/actor%EB%AA%A8%EB%8D%B8/</link>
      <pubDate>Thu, 17 Nov 2016 17:08:34 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/actor%EB%AA%A8%EB%8D%B8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SQL Server Docker image on Linux</title>
      <link>https://jupilhwang.github.io/post/sql-server-docker-image-on-linux/</link>
      <pubDate>Thu, 17 Nov 2016 15:22:30 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/sql-server-docker-image-on-linux/</guid>
      <description>SQL Server on Linux 정말로 놀라운 소식이 아닐수 없다. &amp;ldquo;Microsoft is back&amp;rdquo; 이란 말이 헛말이 아니라는 것이 요즘 MS에서 나오는 새로운 소식드에서 느낄 수 있다. Visual Studio on mac 에 이어서 몇달전에 발표한 SQL Server on Linux 가 실체를 드러냈다. 리눅스 서버에 새롭게 설치를 할 수도 있겠지만 놀랍게도 Docker image를 통해서 손쉽게 배포를 할 수 있도록 한 것이 또 다른 점이라 할 수 있다.. 이제는 거의 모든 회사에서 새로운 제품을 출시하고 나서 Docker image를 통해서 테스트/운영을 할 수 있도록 제공하는 것이 기본이 되어 버렸다.</description>
    </item>
    
    <item>
      <title>Digital Experience Workshop at Seoul (Nov 14, 2016)</title>
      <link>https://jupilhwang.github.io/post/digitalexperience_workshop_161114_seoul/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/digitalexperience_workshop_161114_seoul/</guid>
      <description>Digital Experience Top 3 features  Secutiry Social Mobile  Use Cases  Coordinating with Business Partners Sales Collaboration Support of Mobile Field Workers  Digital Workplace Collaboration  Connections  Real-time conversations and social collaboration Social Graph based discovery of content and conversations Content centric activity stream &amp;ldquo;buddy&amp;rdquo;   Context  Integrated within business workflows Embedded within applications Unified on-premises and cloud content management Multiple content centric mobile experience   Control  Choice of user &amp;amp; content    Context is everything  Business Apps integratation  Sales Cloud, Eloqua, Service Cloud, SRM On-Premises : Siebel, EBS   PAAS Integrations  Proces CS, Sites CS   Hybrid ECM RICH Platform  Architected to be Platform</description>
    </item>
    
    <item>
      <title>Lambda expressions and Stream API with Groovy or JAVA8</title>
      <link>https://jupilhwang.github.io/post/lambda-expressions-and-stream-api-with-groovy-or-java8/</link>
      <pubDate>Fri, 11 Nov 2016 17:29:55 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/lambda-expressions-and-stream-api-with-groovy-or-java8/</guid>
      <description>Lambda expressions and Stream API with Groovy and JAVA 8 Iteration  groovy  def numbers = [1, 2, 3, 4, 5, 6] numbers.each { e -&amp;gt; println e } numbers.each { println it }  java  List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6); numbers.forEach(e -&amp;gt; System.out.println(e)); numbers.forEach(System.out::println); collect  groovy  def numbers = [1, 2, 3, 4, 5, 6] numbers.collect { it * 2 }.each { e -&amp;gt; println e } println numbers.</description>
    </item>
    
    <item>
      <title>Network Cloud Service</title>
      <link>https://jupilhwang.github.io/post/network-cloud-service/</link>
      <pubDate>Fri, 11 Nov 2016 13:23:46 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/network-cloud-service/</guid>
      <description>OSI - Network Layer  Application Prsentation Session Transport Network Data Link Physical  VLANs tag, trunk
IP Routing  Bandwidth   </description>
    </item>
    
    <item>
      <title>Reactive Programming with Groovy</title>
      <link>https://jupilhwang.github.io/post/reactive-programming-with-groovy/</link>
      <pubDate>Wed, 09 Nov 2016 13:07:41 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/reactive-programming-with-groovy/</guid>
      <description>Reactive Streams, Reactive Extensions (Rx)  The Problem :  Performacen : our pages should render within 1000 milliseconds The Rise of microservices : free up resources with Async Operations &amp;amp; Non-Blocking I/O    What is reactive stream (Rx) ? collections + time Single abstration over data from many sources Observer Pattern  Push (not pull) based Iterators  Stream Based Funcational Programming  Imperative vs Reactive Stream  // Iterative List numbers = 1.</description>
    </item>
    
    <item>
      <title>Hugo Blog를 github.io page 로 서비스하기</title>
      <link>https://jupilhwang.github.io/post/hugo-blog%EB%A5%BC-github.io-page-%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 08 Nov 2016 14:17:23 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/hugo-blog%EB%A5%BC-github.io-page-%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%ED%95%98%EA%B8%B0/</guid>
      <description>Hugo Blog Server Hugo blog를 github.com 의 page 에서 서비스 하기 위해서는 우선 두개의 Repository 를 생성한다. 하나는 hugo md 파일을 관리하기 위한 repository 이고 하나는 html 로 redner 된 html을 서비스 하기 위한 page repository 이다.
 hugosite.git &amp;lt;사용자계정&amp;gt;.github.io.git  git repository 설정하기 cd hugosite # 초기 설정하기 git init # hugo git remote add origin https://github.com/namoo4u/hugosite.git # 그리고 public 폴더를 hugosite의 subsite 로 등록한다. git submodule add -b master https://github.</description>
    </item>
    
    <item>
      <title>Bare Meta Cloud Services are now available</title>
      <link>https://jupilhwang.github.io/post/bare-meta-cloud-services-are-now-available/</link>
      <pubDate>Tue, 08 Nov 2016 12:52:55 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/bare-meta-cloud-services-are-now-available/</guid>
      <description>Bare Metal Cloud Services 지원 서비스   Integrated network block storage
  object storage
  identity and access management
  VPN Connectivity
  Software-defined Virtual Cloud Network (VCN)
 secure, elastic, extension of on-premises network    Market leading price-perfomance
 Best in class - predictable, consistent performance NVMe (Non-Volatile Memory Express) SSD for fastest IOPs and low latency    Massive Enterprise Scale</description>
    </item>
    
    <item>
      <title>배우기 정리</title>
      <link>https://jupilhwang.github.io/post/%EB%B0%B0%EC%9A%B0%EA%B8%B0-%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/%EB%B0%B0%EC%9A%B0%EA%B8%B0-%EC%A0%95%EB%A6%AC/</guid>
      <description>Programming  Groovy Go lang Javascript  Angular js 2  RxJS        Scala   Framework  Reactive Programming  AKKA RxJava   Ratpack Springboot  Tools  Jenkins  pipeline    Mobile  Native Script  Cloud  Open Stack Docker + Kubernete  HW  Aduino Raspberry Pi  Lanuage  English  </description>
    </item>
    
    <item>
      <title>WiFi Network in Arch Network Using Terminal</title>
      <link>https://jupilhwang.github.io/post/wifi-network-in-arch-network-using-terminal/</link>
      <pubDate>Thu, 27 Oct 2016 11:29:14 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/wifi-network-in-arch-network-using-terminal/</guid>
      <description>Scanning Network  Arch Linux 에서 iwconfig 이나 iwlist 를 사용할 수 없다면, wireless_tools 가 설치되어 있는지 확인해 보자. $ pacman -S wirelesss_tools
 # 네트워크 인터페이스 이름을 알기 위해서 iwconfig # 인터페이스 이름을 알았다면 ip link set &amp;lt;interface&amp;gt; up # 접속 가능한 WiFi network 을 스캔해 보자 iwlist &amp;lt;interface&amp;gt; scan | less # ip link set &amp;lt;interface&amp;gt; down 1번 방법) Setup A WiFi using &amp;ldquo;netctl&amp;rdquo; # network card 가 가능한지 확인해 본다.</description>
    </item>
    
    <item>
      <title>IPad Retina Display로 External Monitor 만들기</title>
      <link>https://jupilhwang.github.io/post/ipadretinadisplay%EB%A1%9C-external-monitor-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Wed, 19 Oct 2016 15:46:59 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/ipadretinadisplay%EB%A1%9C-external-monitor-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>부품  iPad Retina 1536x2048 9.7&amp;rdquo; (QX2) LCD to Mini DisplayPort Adapter    부품 판매 Site : AbuseMark
 부품 사진 1 :  부품 사진 2 :   가격 : JPY 3,500
  iPad Retina LCD (QX2) - iPad Air 1 / 2    판매물 1 : Aliexpress #1 가격 : $115.00
  판매물 2 : Aliexpress #2 가격 : $57.00
  iPad 강화유리    판매물 1 : Aliexpress #1 가격 : $ 23.</description>
    </item>
    
    <item>
      <title>VLAN 기본</title>
      <link>https://jupilhwang.github.io/post/vlan/</link>
      <pubDate>Wed, 19 Oct 2016 15:46:59 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/vlan/</guid>
      <description>VLAN (Virtual Local Area Network) 물지적 배치와 상관없이 논리적으로 LAN을 구성할 수 있는 기술 하나의 스위치가 있고 이 스위치에는 포트가 1~10 까지 있다고 하자. 1~5 를 VLAN 1 로 6~10을 VLAN 2 로 설정했다면 물리적으로 같은 스위치에 존재해도 VLAN 1과 VLAN 2는 서로 통신하지 못한다. 스위치의 모든 인터페이스는 동일 브로드캐스트 도메인에 포함되어 있으나 VLAN을 적용할 경우 스위치의 일부 인터페이스를 하나의 브로드캐스트 도메인으로 구성하고, 다른 인터페이스를 또다른 브로드캐스트 도메인으로 구성하여 여러 개의 도메인을 만들수 있습니다.</description>
    </item>
    
    <item>
      <title>Network Overlay</title>
      <link>https://jupilhwang.github.io/post/networkoverlay/</link>
      <pubDate>Mon, 17 Oct 2016 14:05:21 +0900</pubDate>
      
      <guid>https://jupilhwang.github.io/post/networkoverlay/</guid>
      <description>VXLAN VXLAN의 &amp;lsquo;X&#39;의 의미는 eXtensible을 뜻하며, L2 Network의 Scale(확장성)을 의미한다. VLAN기반 네트워크보다 더욱 많은 Layer 2 Segment를 구성할수 있으며, VLAN숫자의 제약(4000개)을 극복할 수 있음을 의미함
Network Overlay Network Overlay 이야기를 여기저기에서 많이 들리고는 있지만, 실제로 이것이 무엇인지에 대해선 잘 알수가 없어서 정리해 본다. 간단하게 추상화 레이어라고 하면 될까? 기존 데이터센터 네트워크망이 어떻게 구성이 되어 있던지 Network를 넘어 구성하겠다는 것이다. 요즘 나오는 SDN(Software Defined Network)와 같은 개념이지 않나 싶다.
  Network Overlay 기술</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jupilhwang.github.io/post/oracle-cloud-pcs_doccs-rest-api-%EC%97%B0%EB%8F%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/oracle-cloud-pcs_doccs-rest-api-%EC%97%B0%EB%8F%99/</guid>
      <description>DocCS
OAUTH_TOKEN Curl  Accept : application/xml or application/json Authorization:  Authorization: Basic abclajdlfa= Authorization: Bearer eyJlad..adljfalsd   Content-Length Content-Type  application/json   Accept-Language: fr  Using OAuth  base url : https://documents-krdemo.documents.us2.oraclecloud.com/documents/web?IdcService=GET_OAUTH_TOKEN Reponse  { &amp;quot;LocalData&amp;quot;: { &amp;quot;IdcService&amp;quot;: &amp;quot;GET_OAUTH_TOKEN&amp;quot;, &amp;quot;StatusCode&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;StatusMessage&amp;quot;: &amp;quot;You are logged in as &#39;U9133ACF5AE2AF282FD7F23A723FD68419FE&#39;.&amp;quot;, &amp;quot;StatusMessageKey&amp;quot;: &amp;quot;!csUserLoggedIn,U9133ACF5AE2AF282FD7F23A723FD68419FE&amp;quot;, &amp;quot;dUser&amp;quot;: &amp;quot;U9133ACF5AE2AF282FD7F23A723FD68419FE&amp;quot;, &amp;quot;dUserFullName&amp;quot;: &amp;quot;Jupil Hwang&amp;quot;, &amp;quot;expiration&amp;quot;: &amp;quot;604799&amp;quot;, &amp;quot;idcToken&amp;quot;: &amp;quot;1481347104797:C7968F3B2E31D84A029F65AF0FD970A9&amp;quot;, &amp;quot;localizedForResponse&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;tokenValue&amp;quot;: &amp;quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1dCI6IkxLRERYN2VyRUxYcm5fc0Zwc0RFZkt6ejg3YyIsImtpZCI6ImtyZGVtby5jZXJ0In0.eyJzdWIiOiJqdXBpbC5od2FuZ0BvcmFjbGUuY29tIiwib3JhY2xlLm9hdXRoLnVzZXJfb3JpZ2luX2lkX3R5cGUiOiJMREFQX1VJRCIsIm9yYWNsZS5vYXV0aC51c2VyX29yaWdpbl9pZCI6Imp1cGlsLmh3YW5nQG9yYWNsZS5jb20iLCJpc3MiOiJrcmRlbW8iLCJvcmFjbGUub2F1dGguc3ZjX3BfbiI6ImtyZGVtb1NlcnZpY2VQcm9maWxlIiwiaWF0IjoxNDgxMTc0MzA1LCJvcmFjbGUub2F1dGgucHJuLmlkX3R5cGUiOiJMREFQX1VJRCIsIm9yYWNsZS5vYXV0aC50a19jb250ZXh0IjoicmVzb3VyY2VfYWNjZXNzX3RrIiwiZXhwIjoxNDgxNzc5MTA0LCJhdWQiOlsiaHR0cHM6Ly9kb2N1bWVudHMta3JkZW1vLmRvY3VtZW50cy51czIub3JhY2xlY2xvdWQuY29tOjQ0My9kb2N1bWVudHMiXSwib3JhY2xlLm9hdXRoLnN1Yi5pZF90eXBlIjoiTERBUF9VSUQiLCJwcm4iOiJqdXBpbC5od2FuZ0BvcmFjbGUuY29tIiwianRpIjoiZDA0ZjQ2ODYtNjVhMy00YWIyLTk2NjItMmEzODA2M2I0ZTYzIiwib3JhY2xlLm9hdXRoLmNsaWVudF9vcmlnaW5faWQiOiJkZDdmMmYyNy0zN2QyLTRhMTktYjY3NS02ZWU0NWZhODk0NDUiLCJvcmFjbGUub2F1dGguc2NvcGUiOiJodHRwczovL2RvY3VtZW50cy1rcmRlbW8uZG9jdW1lbnRzLnVzMi5vcmFjbGVjbG91ZC5jb206NDQzL2RvY3VtZW50cyIsInVzZXIudGVuYW50Lm5hbWUiOiJrcmRlbW8iLCJvcmFjbGUub2F1dGguaWRfZF9pZCI6IjQ2NjkzMTY5NDk2MjI0MjA3In0.QUsPt6rXmGnVUyDxeMSKYhKxMFTSnuEqM5zybYlR9TZ1atkCDKdMNuC8euZp2SX45L43gVQbjUmyb-PdJ-jFYnv_c73QBZVcU7h8Kae2UrL39BGRF6dOmhp9b1fi6Ldi7L6GaK393MHgspel0v3vOlpDykISeis-arJEvYJsc10Bj5JO_ZFCP9AWVz4FwtpXFMtuiCiA2DtjAdQDo97qh0NYq2HFQCF4muTjV5KPrqi9_wRTNy4pdywezHLmk5PEqlsTGo2w7opo02t1WnlM6d1weGSr2hDKWv3WMn1WNN6moWNHmBKQk2tYNOe9690qWHo3WNYcDa1nBHDnO3OP3A&amp;quot; }, &amp;quot;ResultSets&amp;quot;: { } } curl -iv -H &#39;Authorization:Bearer token&#39; -X GET {Docs External URL}/api/1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jupilhwang.github.io/post/oracle-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jupilhwang.github.io/post/oracle-cloud/</guid>
      <description>Storage CS 만들기`` ####. Authentication token 가져오기
curl -v -X GET -H &#39;X-Storage-User: Storage-&amp;lt;Identity Domain&amp;gt;:&amp;lt;User Name&amp;gt;&#39; -H &#39;X-Storage-Pass:&amp;lt;Password&amp;gt;&#39; https://storage.us2.oraclecloud.com/auth/v1.0 curl -v -X GET -H &#39;X-Storage-User: Storage-jcsdemo0060:cloud.admin&#39; -H &#39;X-Storage-Pass: dIrty@7TiMBer&#39; https://storage.us2.oraclecloud.com/auth/v1.0 &amp;lt; X-Auth-Token: AUTH_tk37abcede5b5e42bae85eb2d5bf811f2d &amp;lt; X-Storage-Url: https://storage.us2.oraclecloud.com/v1/Storage-jcsdemo0060
Create a Container curl -v -H &#39;X-Auth-Token:AUTH_tk37abcede5b5e42bae85eb2d5bf811f2d&#39; -X PUT https://storage.us2.oraclecloud.com/v1/Storage-jcsdemo0060/HCMDEMO &amp;lt; HTTP/1.1 201 Created
Storage CS 상태확인 curl -v -H &#39;X-Auth-Token:AUTH_tk37abcede5b5e42bae85eb2d5bf811f2d&#39; -X GET https://storage.us2.oraclecloud.com/v1/Storage-jcsdemo0060/HCMDEMO DBaaS CS 만들기 curl -V -H &#39;identityDomainId:jcsdemo0060&#39; -H &#39;Authorization: &#39; -H &#39;X-ID-TENANT_NAME:jcsdemo0060&#39; -X POST /paas/service/dbcs/api/v1.</description>
    </item>
    
  </channel>
</rss>