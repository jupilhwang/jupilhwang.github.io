<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reactive on Just Do It ! 행동하지 않으면 성공도 실패도 없다</title><link>https://jupilhwang.github.io/tags/reactive/</link><description>Recent content in reactive on Just Do It ! 행동하지 않으면 성공도 실패도 없다</description><generator>Hugo -- gohugo.io</generator><language>en-US.UTF8</language><copyright>Jupil Hwang All rights reserved</copyright><lastBuildDate>Wed, 09 Nov 2016 13:07:41 +0900</lastBuildDate><atom:link href="https://jupilhwang.github.io/tags/reactive/index.xml" rel="self" type="application/rss+xml"/><item><title>Reactive Programming with Groovy</title><link>https://jupilhwang.github.io/post/reactive-programming-with-groovy/</link><pubDate>Wed, 09 Nov 2016 13:07:41 +0900</pubDate><guid>https://jupilhwang.github.io/post/reactive-programming-with-groovy/</guid><description>Reactive Streams, Reactive Extensions (Rx) The Problem : Performacen : our pages should render within 1000 milliseconds The Rise of microservices : free up resources with Async Operations &amp;amp; Non-Blocking I/O What is reactive stream (Rx) ? collections + time Single abstration over data from many sources Observer Pattern Push (not pull) based Iterators Stream Based Funcational Programming Imperative vs Reactive Stream // Iterative List numbers = 1..100 int max = numbers.</description></item></channel></rss>